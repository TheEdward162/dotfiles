#!/usr/bin/env python3

import os
from http.server import HTTPServer, BaseHTTPRequestHandler
from http import HTTPStatus
import json

class EchoHttpServerHandler(BaseHTTPRequestHandler):
	# adapted from https://github.com/python/cpython/blob/3.11/Lib/http/server.py#L395
	def handle_one_request(self):
		try:
			self.raw_requestline = self.rfile.readline(65537)
			if len(self.raw_requestline) > 65536:
				self.requestline = ''
				self.request_version = ''
				self.command = ''
				self.send_error(HTTPStatus.REQUEST_URI_TOO_LONG)
				return
			if not self.raw_requestline:
				self.close_connection = True
				return
			if not self.parse_request():
				# An error code has been sent, just exit
				return
			self.do_any()
			self.wfile.flush() #actually send the response if not already done.
		except TimeoutError as e:
			#a read or a write timed out.  Discard this connection
			self.log_error("Request timed out: %r", e)
			self.close_connection = True
			return
	
	def _read_body(self):
		# both .raw and ._sock are implementation details
		self.rfile.raw._sock.settimeout(0.5)
		
		data = b""
		while True:
			try:
				data += self.rfile.read1()
			except TimeoutError:
				break

		try:
			return data.decode("utf-8")
		except:
			return data

	def do_any(self):
		body = {
			"method": self.command,
			"url": self.path,
			"headers": self.headers.items(),
			"body": self._read_body()
		}
		print(body)
		body = json.dumps(body).encode("utf-8")
		
		self.send_response(HTTPStatus.OK)
		self.send_header("Content-type", "application/json")
		self.end_headers()
		self.wfile.write(body)

if __name__ == "__main__":
	port = 8080
	try:
		port = int(sys.argv[1])
	except:
		pass
	
	address = ("", port)
	print("Serving at", address)
	server = HTTPServer(address, EchoHttpServerHandler)
	server.serve_forever()
