#!/usr/bin/env python3

import os
import sys
import json
import subprocess

def extract_target(invocation):
	PREFIX = "zig-"
	prefix_index = invocation.find(PREFIX)
	if prefix_index >= 0:
		return invocation[prefix_index + len(PREFIX):]
	
	raise RuntimeError(f"Unknown invocation format - cannot extract target \"{invocation}\"")

def remove_crti(args):
	REMOVE_SUFFIXES = [
		"musl/lib/self-contained/rcrt1.o",
		"musl/lib/self-contained/crti.o",
		"musl/lib/self-contained/crt1.o"
	]
	return filter(
		lambda arg: not any(arg.endswith(suffix) for suffix in REMOVE_SUFFIXES),
		args
	)

def handle_lgcc_s(args):
	return map(
		lambda arg: "-lunwind" if arg == "-lgcc_s" else arg,
		args
	)

def remove_no_undefined_version(args):
	return filter(
		lambda arg: arg != "-Wl,--no-undefined-version",
		args
	)

def remove_target(args):
	prev_was_target = False
	for arg in args:
		if prev_was_target:
			prev_was_target = False
			continue
		if arg == "--target":
			prev_was_target = True
			continue
		if arg.startswith("--target="):
			continue
		yield arg

def get_native_target():
	targets_p = subprocess.run(["zig", "targets"], check = True, stdout = subprocess.PIPE)
	# since zig switched to ZON output and python doesn't support it natively we'll just
	# close our eyes and pray
	text = targets_p.stdout.decode("utf-8")
	triple_start = text.find(".triple")
	triple_value_start = text.find('"', triple_start)
	triple_value_end = text.find('"', triple_value_start + 1)
	triple_value = text[triple_value_start + 1 : triple_value_end]
	triple = triple_value.split("-")
	triple_os = triple[1].split(".")[0]
	return triple[0], triple_os, triple[2]

target = extract_target(sys.argv[0])
# allow target to be:
# "cc" - do not pass -target to zig command at all
# "native" - pass as-is (zig will choose the native target, ideally the same as not passing it at all)
# <native> - target specifier that matches the native target, or a subset of it - change to "native", otherwise it breaks stuff
# <other> - pass as-is
cmd = ["zig", "cc"]

native_target = "-".join(get_native_target())

# TODO: this `not in` condition doesn't work for something like `x86_64-gnu`
if target != "cc" and target not in native_target:
	cmd += ["-target", target]

args = sys.argv[1:]
if "musl" in target:
	args = remove_crti(args)
args = handle_lgcc_s(args)
args = remove_no_undefined_version(args)
args = remove_target(args)
cmd += list(args)

if "ZIG_CC_DRY_RUN" in os.environ:
	print("zig-cc would run:", cmd)
	exit(0)

p = subprocess.run(cmd, check = False)
if p.returncode != 0:
	exit(p.returncode)
	# raise RuntimeError(f"zig cc failed with return code {p.returncode}", cmd)
