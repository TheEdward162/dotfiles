#!/usr/bin/env python3

AC_PATH = "/sys/class/power_supply/AC"
BT_PATH = "/sys/class/power_supply/BAT0"

class PowerInfo:
	def __init__(
		self,
		charge,
		charge_full,
		charge_design,
		draw,
		ac_online
	):
		self.charge = charge
		self.charge_full = charge_full
		self.charge_design = charge_design
		self.draw = draw
		self.ac_online = ac_online
	
	def __str__(self):
		return f"{self.charge}/{self.charge_full} ({self.charge_design}) [{self.draw[0]}μV * {self.draw[1]}μA] {self.ac_online}"

	def pretty(self):
		return (
			f"charge: {self.charge_percent()}% (of design: {self.charge_of_design_percent()}%)\n"
			f"draw: {self.draw_watt()}W\n"
			f"state: {self.charging_state()}\n"
		)

	def charge_percent(self):
		percent = round(self.charge / self.charge_full * 100, 2)
		return percent

	def charge_of_design_percent(self):
		percent = round(self.charge / self.charge_design * 100, 2)
		return percent

	def charge_original_percent(self):
		percent = round(self.charge_full / self.charge_design * 100, 2)
		return percent

	def draw_watt(self):
		draw = round(self.draw[0] / 1_000_000 * self.draw[1] / 1_000_000, 2)
		return draw

	def charging_state(self):
		return "Charging" if self.ac_online else "Drawing"

	@staticmethod
	def read_number_file(path):
		with open(path, "r") as f:
			return int(f.read())


	@staticmethod
	def load():
		charge = PowerInfo.read_number_file(f"{BT_PATH}/charge_now")
		charge_full = PowerInfo.read_number_file(f"{BT_PATH}/charge_full")
		charge_design = PowerInfo.read_number_file(f"{BT_PATH}/charge_full_design")
		draw = (
			PowerInfo.read_number_file(f"{BT_PATH}/voltage_now"),
			PowerInfo.read_number_file(f"{BT_PATH}/current_now")
		)
		ac_online = PowerInfo.read_number_file(f"{AC_PATH}/online")

		return PowerInfo(
			charge, charge_full, charge_design, draw, ac_online
		)

info = PowerInfo.load()
print(info)
print(info.pretty())